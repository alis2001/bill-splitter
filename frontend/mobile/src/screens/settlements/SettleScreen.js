import React, { useState, useContext } from 'react';
import { 
  View, Text, StyleSheet, ScrollView, TouchableOpacity, 
  Alert, Animated, Share 
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { AuthContext } from '../../context/AuthContext';
import { eventsAPI } from '../../services/apiService';

const SettleScreen = ({ navigation, route }) => {
  const { event, settlements } = route.params;
  const { user } = useContext(AuthContext);
  const { balances = {}, settlements: settlementList = [] } = settlements;
  const [recordingPayment, setRecordingPayment] = useState(null);
  const [pulseAnim] = useState(new Animated.Value(1));

  const startPulse = () => {
    Animated.sequence([
      Animated.timing(pulseAnim, {
        toValue: 1.05,
        duration: 150,
        useNativeDriver: true,
      }),
      Animated.timing(pulseAnim, {
        toValue: 1,
        duration: 150,
        useNativeDriver: true,
      })
    ]).start();
  };

  const handleRecordPayment = async (settlement) => {
    setRecordingPayment(settlement);
    startPulse();

    const result = await eventsAPI.recordPayment(event.id, {
      to_user_id: settlement.to_user_id,
      amount: settlement.amount
    });

    setRecordingPayment(null);

    if (result.success) {
      Alert.alert('Payment Recorded!', 'The payment has been marked as completed.');
      navigation.goBack();
    } else {
      Alert.alert('Error', result.error);
    }
  };

  const handleShareSettlement = async () => {
    const message = `ðŸ’° Settlement Summary for "${event.name}"\n\n` +
      settlementList.map(s => 
        `â€¢ User ${s.from_user_id.substring(0, 8)} owes User ${s.to_user_id.substring(0, 8)}: $${s.amount.toFixed(2)}`
      ).join('\n') +
      '\n\nGenerated by Bill Splitter app';

    try {
      await Share.share({ message });
    } catch (error) {
      console.log('Share error:', error);
    }
  };

  const getUserName = (userId) => {
    if (userId === user?.id) return 'You';
    return `User ${userId.substring(0, 8)}`;
  };

  const renderBalanceCard = (userId, balance) => {
    const isCurrentUser = userId === user?.id;
    const isPositive = balance > 0;
    const isNegative = balance < 0;

    return (
      <View key={userId} style={[
        styles.balanceCard,
        isCurrentUser && styles.currentUserCard,
        isPositive && styles.positiveBalance,
        isNegative && styles.negativeBalance
      ]}>
        <View style={styles.balanceHeader}>
          <View style={[
            styles.balanceAvatar,
            isPositive && { backgroundColor: '#38A169' },
            isNegative && { backgroundColor: '#E53E3E' },
            balance === 0 && { backgroundColor: '#718096' }
          ]}>
            <Text style={styles.balanceAvatarText}>
              {isCurrentUser ? 'Y' : 'U'}
            </Text>
          </View>
          <View style={styles.balanceInfo}>
            <Text style={styles.balanceName}>{getUserName(userId)}</Text>
            <Text style={styles.balanceStatus}>
              {balance > 0 && 'Is owed money'}
              {balance < 0 && 'Owes money'}
              {balance === 0 && 'All settled up'}
            </Text>
          </View>
        </View>
        
        <View style={styles.balanceAmount}>
          <Text style={[
            styles.balanceValue,
            { color: isPositive ? '#38A169' : isNegative ? '#E53E3E' : '#718096' }
          ]}>
            {balance > 0 ? '+' : ''}${Math.abs(balance).toFixed(2)}
          </Text>
        </View>
      </View>
    );
  };

  const renderSettlementCard = (settlement, index) => {
    const isFromCurrentUser = settlement.from_user_id === user?.id;
    const isToCurrentUser = settlement.to_user_id === user?.id;
    const isRecording = recordingPayment?.from_user_id === settlement.from_user_id;

    return (
      <Animated.View 
        key={index} 
        style={[
          styles.settlementCard,
          (isFromCurrentUser || isToCurrentUser) && styles.userInvolvedCard,
          { transform: [{ scale: isRecording ? pulseAnim : 1 }] }
        ]}
      >
        <View style={styles.settlementHeader}>
          <View style={styles.settlementFlow}>
            <View style={[styles.settlementAvatar, styles.fromAvatar]}>
              <Text style={styles.settlementAvatarText}>
                {isFromCurrentUser ? 'Y' : 'U'}
              </Text>
            </View>
            
            <View style={styles.settlementArrow}>
              <Ionicons name="arrow-forward" size={20} color="#1A365D" />
              <Text style={styles.settlementAmount}>
                ${settlement.amount.toFixed(2)}
              </Text>
            </View>
            
            <View style={[styles.settlementAvatar, styles.toAvatar]}>
              <Text style={styles.settlementAvatarText}>
                {isToCurrentUser ? 'Y' : 'U'}
              </Text>
            </View>
          </View>
        </View>

        <View style={styles.settlementDetails}>
          <Text style={styles.settlementText}>
            <Text style={styles.settlementUser}>
              {getUserName(settlement.from_user_id)}
            </Text>
            {' owes '}
            <Text style={styles.settlementUser}>
              {getUserName(settlement.to_user_id)}
            </Text>
          </Text>
        </View>

        {(isFromCurrentUser || isToCurrentUser) && (
          <TouchableOpacity
            style={[
              styles.recordButton,
              isRecording && styles.recordingButton
            ]}
            onPress={() => handleRecordPayment(settlement)}
            disabled={isRecording}
            activeOpacity={0.8}
          >
            <Ionicons 
              name={isRecording ? "hourglass" : "checkmark-circle"} 
              size={16} 
              color="#FFFFFF" 
            />
            <Text style={styles.recordButtonText}>
              {isRecording ? 'Recording...' : 'Mark as Paid'}
            </Text>
          </TouchableOpacity>
        )}
      </Animated.View>
    );
  };

  const totalOwed = Object.values(balances).reduce((sum, balance) => 
    sum + (balance < 0 ? Math.abs(balance) : 0), 0
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" size={24} color="#2D3748" />
        </TouchableOpacity>
        <Text style={styles.title}>Settlements</Text>
        <TouchableOpacity onPress={handleShareSettlement}>
          <Ionicons name="share-outline" size={24} color="#1A365D" />
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Summary Card */}
        <View style={styles.summaryCard}>
          <View style={styles.summaryHeader}>
            <Ionicons name="calculator" size={24} color="#1A365D" />
            <Text style={styles.summaryTitle}>Settlement Summary</Text>
          </View>
          <Text style={styles.summaryAmount}>${totalOwed.toFixed(2)}</Text>
          <Text style={styles.summarySubtitle}>
            {settlementList.length} {settlementList.length === 1 ? 'payment' : 'payments'} needed
          </Text>
        </View>

        {/* Individual Balances */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Individual Balances</Text>
          {Object.entries(balances).map(([userId, balance]) => 
            renderBalanceCard(userId, balance)
          )}
        </View>

        {/* Suggested Payments */}
        {settlementList.length > 0 ? (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Suggested Payments</Text>
            <Text style={styles.sectionSubtitle}>
              These payments will settle all balances with minimum transactions
            </Text>
            {settlementList.map(renderSettlementCard)}
          </View>
        ) : (
          <View style={styles.emptyState}>
            <Ionicons name="checkmark-circle" size={64} color="#38A169" />
            <Text style={styles.emptyTitle}>All Settled!</Text>
            <Text style={styles.emptySubtitle}>
              Everyone's balances are even. No payments needed!
            </Text>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FAFAFA',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2D3748',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  summaryCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginBottom: 24,
    alignItems: 'center',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  summaryHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  summaryTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2D3748',
    marginLeft: 8,
  },
  summaryAmount: {
    fontSize: 32,
    fontWeight: '700',
    color: '#1A365D',
    marginBottom: 8,
  },
  summarySubtitle: {
    fontSize: 14,
    color: '#718096',
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2D3748',
    marginBottom: 4,
  },
  sectionSubtitle: {
    fontSize: 12,
    color: '#718096',
    marginBottom: 12,
  },
  balanceCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 8,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
  },
  currentUserCard: {
    borderWidth: 2,
    borderColor: '#1A365D',
  },
  positiveBalance: {
    borderLeftWidth: 4,
    borderLeftColor: '#38A169',
  },
  negativeBalance: {
    borderLeftWidth: 4,
    borderLeftColor: '#E53E3E',
  },
  balanceHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  balanceAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  balanceAvatarText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  balanceInfo: {
    flex: 1,
  },
  balanceName: {
    fontSize: 16,
    fontWeight: '500',
    color: '#2D3748',
  },
  balanceStatus: {
    fontSize: 12,
    color: '#718096',
  },
  balanceAmount: {
    alignItems: 'flex-end',
  },
  balanceValue: {
    fontSize: 18,
    fontWeight: '600',
  },
  settlementCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
  },
  userInvolvedCard: {
    borderWidth: 2,
    borderColor: '#E6FFFA',
    backgroundColor: '#F0FFF4',
  },
  settlementHeader: {
    marginBottom: 12,
  },
  settlementFlow: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  settlementAvatar: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
  },
  fromAvatar: {
    backgroundColor: '#E53E3E',
  },
  toAvatar: {
    backgroundColor: '#38A169',
  },
  settlementAvatarText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  settlementArrow: {
    flex: 1,
    alignItems: 'center',
    marginHorizontal: 16,
  },
  settlementAmount: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1A365D',
    marginTop: 4,
  },
  settlementDetails: {
    marginBottom: 12,
  },
  settlementText: {
    fontSize: 14,
    color: '#718096',
    textAlign: 'center',
  },
  settlementUser: {
    fontWeight: '600',
    color: '#2D3748',
  },
  recordButton: {
    backgroundColor: '#38A169',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 10,
    borderRadius: 8,
  },
  recordingButton: {
    backgroundColor: '#A0AEC0',
  },
  recordButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 6,
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 48,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#2D3748',
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 14,
    color: '#718096',
    textAlign: 'center',
    lineHeight: 20,
  },
});

export default SettleScreen;